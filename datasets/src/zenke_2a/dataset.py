from typing import Any, List, Self, Union
import torch
from torch.utils.data import Dataset, DataLoader
import pandas as pd

from datasets.src.zenke_2a.constants import TRAIN_DATA_PATH


class SequentialDataset(Dataset):
    """
    A PyTorch Dataset superclass for handling sequential data generated by the script.
    """

    def __init__(self, dataframe: pd.DataFrame) -> None:
        """
        Initializes the dataset by loading the data from a CSV file.

        Parameters:
        csv_file (str): Path to the CSV file containing the generated data.
        """
        self.dataframe = dataframe
        self.samples = self.dataframe.groupby('sample')
        return

    def __len__(self) -> int:
        """
        Returns the total number of samples in the dataset.
        """
        return len(self.samples)

    def __getitem__(self, idx: Union[int, List[int], torch.Tensor]) -> torch.Tensor:
        """
        Retrieves a sample from the dataset at the specified index.

        Parameters:
        idx (int): Index of the sample to retrieve.

        Returns:
        torch.Tensor: Tensor containing all datapoints of the requested sample.
        """
        if torch.is_tensor(idx):
            idx = idx.tolist()  # type: ignore[union-attr]

        sample_data = self.samples.get_group(idx)
        sample_data = sample_data[['x', 'y']].to_numpy()
        sample_tensor = torch.tensor(sample_data, dtype=torch.float)

        return sample_tensor


if __name__ == "__main__":
    dataframe = pd.read_csv(TRAIN_DATA_PATH)
    sequential_dataset = SequentialDataset(dataframe)

    data_loader = DataLoader(sequential_dataset, batch_size=10, shuffle=False)

    for i, batch in enumerate(data_loader):
        print(f"Batch {i} - Sample data: {batch.shape}")
        break  # Only showing the first batch for demonstration purposes
